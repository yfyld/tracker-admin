{"version":3,"sources":["pages/admin/RoleMange.module.less","pages/admin/components/RoleAddModal.tsx","pages/admin/components/RoleLinkPermissionsModal.tsx","pages/admin/components/RoleEditModal.tsx","pages/admin/RoleManage.tsx"],"names":["module","exports","Option","Select","connect","state","role","addRoleItem","updateRoleItem","dispatch","bindActionCreators","onAddRole","params","doPostRole","request","Form","create","props","getFieldDecorator","form","React","resetFields","visible","onOk","e","preventDefault","validateFields","err","values","a","toastformError","name","trimAll","code","toLocaleUpperCase","onClose","title","onCancel","layout","formItemLayout","Item","label","rules","required","message","initialValue","placeholder","type","roleTypeDescription","map","key","id","value","description","style","minHeight","rows","PermissionType","onPutRole","doPutRole","disabled","allPermissionList","permission","roleInfo","onPutRolePermissions","doUpdateRolePermissions","apiCheckPermissionIds","setApiCheckPermissionIds","routerCheckedPermissionIds","setRouterCheckedPermissionIds","functionCheckedPermissionIds","setFunctionCheckedPermissionIds","options","list","item","status","apiOptions","filter","option","API","routerOptions","ROUTER","functionOptions","FUNCTION","permissions","i","handleSubmit","roleId","permissionIds","concat","choosePermissions","checkedValues","Group","onChange","roleList","roleListParams","onGetRoleList","doGetRole","onDeleteRole","doDeleteRole","onEditRole","doEditRole","onGetRolePermissions","doGetRoleInfo","useState","addRoleVisible","setAddRoleVisible","editRoleVisible","setEditRoleVisible","choosePermissionsVisible","setChoosePermissionsVisible","choosePermissionsRoleId","setChoosePermissionsRoleId","columns","dataIndex","render","text","record","find","width","size","onClick","onConfirm","className","wrapper","gutter","span","submitButtons","rightBtn","table","rowKey","dataSource","pagination","pageSize","getFieldsValue","page","current"],"mappings":"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","file":"static/js/21.3b95a192.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RoleMange_wrapper__2s0pB\",\"header\":\"RoleMange_header__1Z6q6\",\"listBox\":\"RoleMange_listBox__o6LWe\",\"table\":\"RoleMange_table__2NWsA\",\"submitButtons\":\"RoleMange_submitButtons__2qCQz\",\"rightBtn\":\"RoleMange_rightBtn__3LBlU\"};","import { Modal, Form, Input, Select } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout, roleTypeDescription } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IBaseRole, IUpdateRole } from '@/api';\nimport { toastformError, trimAll } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction, IStoreState } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doPostRole } from '@/store/actions';\nimport TextArea from 'antd/lib/input/TextArea';\n\nconst { Option } = Select;\n\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  onAddRole: (param: IBaseRole) => IAction;\n  addRoleItem: IBaseRole;\n  updateRoleItem: IUpdateRole;\n}\n\nconst RoleAddModal = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields(async (err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      // 格式化处理\n      values.name = trimAll(values.name);\n      values.code = trimAll(values.code.toLocaleUpperCase());\n      props.onAddRole(values);\n      props.onClose(false);\n    });\n  };\n\n  return (\n    <Modal onOk={handleSubmit} title='新建角色' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='角色名'>\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: '请输入角色名' }],\n            initialValue: props.addRoleItem.name\n          })(<Input placeholder='请输入角色名' />)}\n        </Form.Item>\n\n        <Form.Item label='角色码'>\n          {getFieldDecorator('code', {\n            rules: [{ required: true, message: '请输入角色码' }],\n            initialValue: props.addRoleItem.code\n          })(<Input placeholder='请输入角色码' />)}\n        </Form.Item>\n        <Form.Item label='角色类型'>\n          {getFieldDecorator('type', {\n            rules: [{ required: true, message: '角色类型' }],\n            initialValue: props.addRoleItem.type\n          })(\n            <Select placeholder='请选择'>\n              {roleTypeDescription.map((type) => {\n                return (\n                  <Option key={type.id} value={type.id}>\n                    {type.name}\n                  </Option>\n                );\n              })}\n            </Select>\n          )}\n        </Form.Item>\n        <Form.Item {...formItemLayout} label='角色描述'>\n          {getFieldDecorator('description', {\n            initialValue: props.addRoleItem.description\n          })(<TextArea style={{ minHeight: 32 }} placeholder='请输入角色描述' rows={4} />)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { addRoleItem, updateRoleItem } = state.role;\n  return {\n    addRoleItem,\n    updateRoleItem\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onAddRole: (params: IBaseRole) => {\n        return doPostRole.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create<Props>()(RoleAddModal));\n","import { Modal, Checkbox } from 'antd';\nimport * as React from 'react';\nimport { IUpdateRolePermissions, IPermissionList, IRoleInfo } from '@/api';\nimport { connect } from 'react-redux';\nimport { IAction, IStoreState } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doUpdateRolePermissions } from '@/store/actions';\n\ninterface Props {\n  roleId: number;\n  allPermissionList: IPermissionList;\n  roleInfo: IRoleInfo;\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  onPutRolePermissions: (param: IUpdateRolePermissions) => IAction;\n}\n\nenum PermissionType {\n  API = 1,\n  ROUTER,\n  FUNCTION\n}\nconst RoleLinkPermissionsModal = (props: Props) => {\n  const [apiCheckPermissionIds, setApiCheckPermissionIds] = React.useState(null);\n  const [routerCheckedPermissionIds, setRouterCheckedPermissionIds] = React.useState(null);\n  const [functionCheckedPermissionIds, setFunctionCheckedPermissionIds] = React.useState(null);\n\n  const options = props.allPermissionList.list.map((item) => ({\n    label: item.name,\n    value: item.id,\n    disabled: !item.status,\n    // checked: item.checked,\n    type: item.type\n  }));\n  const apiOptions = options.filter((option) => option.type === PermissionType.API); // API类型权限\n  const routerOptions = options.filter((option) => option.type === PermissionType.ROUTER); // 路由类型权限\n  const functionOptions = options.filter((option) => option.type === PermissionType.FUNCTION); // 功能类型权限\n\n  React.useEffect(() => {\n    setApiCheckPermissionIds(props.roleInfo.permissions.filter((i) => i.type === PermissionType.API).map((i) => i.id));\n    setRouterCheckedPermissionIds(\n      props.roleInfo.permissions.filter((i) => i.type === PermissionType.ROUTER).map((i) => i.id)\n    );\n    setFunctionCheckedPermissionIds(\n      props.roleInfo.permissions.filter((i) => i.type === PermissionType.FUNCTION).map((i) => i.id)\n    );\n  }, [props.roleInfo, props.allPermissionList]);\n\n  const handleSubmit = async () => {\n    await props.onPutRolePermissions({\n      roleId: props.roleId,\n      permissionIds: apiCheckPermissionIds.concat(routerCheckedPermissionIds).concat(functionCheckedPermissionIds)\n    });\n    props.onClose(false);\n  };\n\n  const choosePermissions = (type: PermissionType) => (checkedValues: any) => {\n    if (type === PermissionType.API) {\n      setApiCheckPermissionIds(checkedValues);\n    } else if (type === PermissionType.ROUTER) {\n      setRouterCheckedPermissionIds(checkedValues);\n    } else {\n      setFunctionCheckedPermissionIds(checkedValues);\n    }\n  };\n\n  return (\n    <Modal onOk={handleSubmit} title='关联权限' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <h4>接口类型权限</h4>\n      <Checkbox.Group\n        options={apiOptions}\n        value={apiCheckPermissionIds}\n        onChange={choosePermissions(PermissionType.API)}\n      />\n\n      <h4>路由类型权限</h4>\n      <Checkbox.Group\n        options={routerOptions}\n        value={routerCheckedPermissionIds}\n        onChange={choosePermissions(PermissionType.ROUTER)}\n      />\n      <h4>功能类型权限</h4>\n      <Checkbox.Group\n        options={functionOptions}\n        value={functionCheckedPermissionIds}\n        onChange={choosePermissions(PermissionType.FUNCTION)}\n      />\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { allPermissionList } = state.permission;\n  const { roleInfo } = state.role;\n  return {\n    allPermissionList,\n    roleInfo\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onPutRolePermissions: (params: IUpdateRolePermissions) => {\n        return doUpdateRolePermissions.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoleLinkPermissionsModal);\n","import { Modal, Form, Input, Select } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout, roleTypeDescription } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IBaseRole, IUpdateRole } from '@/api';\nimport { toastformError, trimAll } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction, IStoreState } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doPostRole, doPutRole } from '@/store/actions';\nimport TextArea from 'antd/lib/input/TextArea';\n\nconst { Option } = Select;\n\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  onPutRole: (param: IUpdateRole) => IAction;\n  updateRoleItem: IUpdateRole;\n}\n\nconst RoleEditModal = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields(async (err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.onPutRole({\n        ...props.updateRoleItem,\n        ...values\n      });\n      props.onClose(false);\n    });\n  };\n\n  return (\n    <Modal onOk={handleSubmit} title='新建角色' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='角色名'>\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: '请输入角色名' }],\n            initialValue: props.updateRoleItem.name\n          })(<Input placeholder='请输入角色名' disabled={true} />)}\n        </Form.Item>\n\n        <Form.Item label='角色码'>\n          {getFieldDecorator('code', {\n            rules: [{ required: true, message: '请输入角色码' }],\n            initialValue: props.updateRoleItem.code\n          })(<Input placeholder='请输入角色码' disabled={true} />)}\n        </Form.Item>\n        <Form.Item label='角色类型'>\n          {getFieldDecorator('type', {\n            rules: [{ required: true, message: '角色类型' }],\n            initialValue: props.updateRoleItem.type\n          })(\n            <Select placeholder='请选择' disabled={true}>\n              {roleTypeDescription.map((type) => {\n                return (\n                  <Option key={type.id} value={type.id}>\n                    {type.name}\n                  </Option>\n                );\n              })}\n            </Select>\n          )}\n        </Form.Item>\n        <Form.Item {...formItemLayout} label='角色描述'>\n          {getFieldDecorator('description', {\n            initialValue: props.updateRoleItem.description\n          })(<TextArea style={{ minHeight: 32 }} placeholder='请输入角色描述' rows={4} />)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { updateRoleItem } = state.role;\n  return {\n    updateRoleItem\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onPutRole: (params: IUpdateRole) => {\n        return doPutRole.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create<Props>()(RoleEditModal));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IAction, IPageData, IStoreState } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { IBaseRole, IRoleListItem, IQueryRole, IUpdateRole } from '@/api';\nimport { doDeleteRole, doEditRole, doGetRole, doGetRoleInfo } from '@/store/actions';\nimport { ColumnProps, PaginationConfig } from 'antd/lib/table';\nimport { Link } from 'react-router-dom';\nimport { ROUTE_PATH, roleTypeDescription, formItemLayout } from '@/constants';\nimport { Button, Table, Popconfirm, notification, Row, Col, Input, Form, Card } from 'antd';\nimport RoleAddModal from '@/pages/admin/components/RoleAddModal';\nimport style from '@/pages/admin/RoleMange.module.less';\nimport RoleEditModal from './components/RoleEditModal';\nimport { toastformError, trimAll } from '@/utils';\nimport { FormComponentProps } from 'antd/lib/form';\nimport RoleLinkPermissionsModal from '@/pages/admin/components/RoleLinkPermissionsModal';\n\ninterface Props extends FormComponentProps {\n  addRoleItem: IBaseRole;\n  updateRoleItem: IUpdateRole;\n  roleList: IPageData<IRoleListItem>;\n  roleListParams: IQueryRole;\n  onGetRoleList: (params: IQueryRole) => IAction;\n  onDeleteRole: (params: number) => IAction;\n  onEditRole: (params: IUpdateRole) => IAction;\n  onGetRolePermissions: (roleId: number) => IAction;\n}\n\nconst RoleManage = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n  const [addRoleVisible, setAddRoleVisible] = React.useState(false);\n  const [editRoleVisible, setEditRoleVisible] = React.useState(false);\n  const [choosePermissionsVisible, setChoosePermissionsVisible] = React.useState(false);\n  const [choosePermissionsRoleId, setChoosePermissionsRoleId] = React.useState(null);\n\n  const columns: ColumnProps<IRoleListItem>[] = [\n    {\n      key: 'name',\n      title: '角色名',\n      dataIndex: 'name'\n    },\n    {\n      key: 'code',\n      title: '角色码',\n      dataIndex: 'code'\n    },\n    {\n      key: 'type',\n      title: '角色类型',\n      render: (text, record) => <span>{roleTypeDescription.find((item) => item.id === record.type).name}</span>\n    },\n    {\n      key: 'description',\n      title: '描述',\n      dataIndex: 'description'\n    },\n    {\n      key: 'updaterNickname',\n      title: '最后更新人',\n      dataIndex: 'updaterNickname'\n    },\n    {\n      key: 'action',\n      title: '操作',\n      width: 280,\n      render: (text, record) => (\n        <span>\n          <Button\n            type='link'\n            size='small'\n            onClick={async () => {\n              await props.onGetRolePermissions(record.id);\n              setChoosePermissionsRoleId(record.id);\n              setChoosePermissionsVisible(true);\n            }}\n          >\n            关联权限\n          </Button>\n          <Button\n            type='link'\n            size='small'\n            onClick={() => {\n              props.onEditRole(record);\n              setEditRoleVisible(true);\n            }}\n          >\n            编辑\n          </Button>\n          <Popconfirm title='是否要删除此行？' onConfirm={() => props.onDeleteRole(record.id)}>\n            <Button type='link' size='small'>\n              删除\n            </Button>\n          </Popconfirm>\n        </span>\n      )\n    }\n  ];\n\n  const handleTableChange = (pagination: PaginationConfig) => {\n    props.onGetRoleList({\n      ...props.form.getFieldsValue(),\n      page: pagination.current,\n      pageSize: pagination.pageSize\n    });\n  };\n\n  const handleFilter = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      values.name = trimAll(values.name);\n      props.onGetRoleList(values);\n    });\n  };\n\n  return (\n    <div className={style.wrapper}>\n      <Row gutter={24}>\n        <Col>\n          <Row>\n            <Form layout='horizontal' {...formItemLayout}>\n              <Col span={6}>\n                <Form.Item label='角色名/码'>\n                  {getFieldDecorator('name', {\n                    initialValue: props.roleListParams.name\n                  })(<Input placeholder='请输入角色名/角色码' />)}\n                </Form.Item>\n              </Col>\n            </Form>\n            <Col span={4}>\n              <span className={style.submitButtons}>\n                <Button type='primary' onClick={handleFilter}>\n                  查询\n                </Button>\n              </span>\n            </Col>\n            <Col span={14}>\n              <RoleAddModal visible={addRoleVisible} onClose={setAddRoleVisible}></RoleAddModal>\n              <RoleEditModal visible={editRoleVisible} onClose={setEditRoleVisible}></RoleEditModal>\n              <RoleLinkPermissionsModal\n                roleId={choosePermissionsRoleId}\n                visible={choosePermissionsVisible}\n                onClose={setChoosePermissionsVisible}\n              ></RoleLinkPermissionsModal>\n              <div className={style.rightBtn}>\n                <Button type='primary' onClick={() => setAddRoleVisible(true)}>\n                  新建角色\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <div className={style.table}>\n        <Table\n          rowKey='id'\n          columns={columns}\n          dataSource={props.roleList.list}\n          pagination={{ pageSize: 20 }}\n          onChange={handleTableChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { addRoleItem, updateRoleItem, roleList, roleListParams } = state.role;\n  return {\n    addRoleItem,\n    updateRoleItem,\n    roleList,\n    roleListParams\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onGetRoleList: (params: IQueryRole) => {\n        return doGetRole.request(params);\n      },\n      onDeleteRole: (params: number) => {\n        return doDeleteRole.request(params);\n      },\n      onEditRole: (params: IUpdateRole) => {\n        return doEditRole(params);\n      },\n      onGetRolePermissions: (roleId: number) => {\n        return doGetRoleInfo.request(roleId);\n      }\n    },\n    dispatch\n  );\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create<Props>()(RoleManage));\n"],"sourceRoot":""}