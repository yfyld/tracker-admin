{"version":3,"sources":["pages/projectList/ProjectList.module.less","pages/projectList/components/ProjectPane.module.less","pages/projectList/components/ProjectUpdateModal.tsx","pages/projectList/components/ProjectPane.tsx","pages/projectList/components/ProjectAddModel.tsx","pages/projectList/components/ProjectListForm.tsx","pages/projectList/ProjectList.tsx"],"names":["module","exports","Form","create","props","getFieldDecorator","form","React","resetFields","visible","onOk","e","preventDefault","validateFields","err","values","toastformError","onSubmit","id","orginInfo","onClose","title","onCancel","layout","formItemLayout","Item","label","initialValue","name","rules","required","message","placeholder","image","description","Meta","Card","confirm","Modal","connect","dispatch","bindActionCreators","onDeleteProject","doDeleteProject","request","onUpdateProject","param","doUpdateProject","projectInfo","console","log","useState","updateProjectVisible","setUpdateProjectVisible","className","style","wrapper","ProjectUpdateModal","to","width","cover","alt","src","noimg","actions","key","type","onClick","content","defaultValue","onChange","target","value","okText","cancelText","error","Promise","reject","handleDelete","avatar","AvatarText","info","creator","handleAddProject","params","doAddProject","page","pageSize","projectName","state","project","projectList","projectListParams","handleSubmit","doGetProjectList","addProjectVisible","setAddProjectVisible","header","listBox","list","map","current","total","totalCount"],"mappings":"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","file":"static/js/20.c3de277c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProjectList_wrapper__2sl33\",\"header\":\"ProjectList_header__r8sC_\",\"listBox\":\"ProjectList_listBox__2fHLw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProjectPane_wrapper__3T85k\"};","import { Modal, Form, Input, message } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IProjectUpdateParam, IProjectListItem } from '@/api';\nimport { toastformError } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doUpdateProject } from '@/store/actions';\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  orginInfo: IProjectListItem;\n  onSubmit: (param: IProjectUpdateParam) => IAction;\n}\n\nconst ProjectUpdateModel = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.onSubmit({ id: props.orginInfo.id, ...values });\n      props.onClose(false);\n    });\n  };\n  return (\n    <Modal onOk={handleSubmit} title='编辑项目' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='项目名称'>\n          {getFieldDecorator('name', {\n            initialValue: props.orginInfo.name,\n            rules: [{ required: true, message: '请输入项目名称' }]\n          })(<Input placeholder='请输入项目名称' />)}\n        </Form.Item>\n        <Form.Item label='项目封面'>\n          {getFieldDecorator('image', { initialValue: props.orginInfo.image })(<Input placeholder='请输入封面链接' />)}\n        </Form.Item>\n        <Form.Item label='项目描述'>\n          {getFieldDecorator('description', { initialValue: props.orginInfo.description })(\n            <Input placeholder='请输入项目描述' />\n          )}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default Form.create<Props>()(ProjectUpdateModel);\n","import noimg from '@/assets/imgs/noimg.jpg';\nimport AvatarText from '@/components/AvatarText';\nimport { Card, Icon, Popover, Modal, Input, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport style from './ProjectPane.module.less';\nimport { IProjectListItem, IProjectUpdateParam } from '@/api';\nimport { connect } from 'react-redux';\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doDeleteProject, doUpdateProject } from '@/store/actions';\nimport ProjectUpdateModal from './ProjectUpdateModal';\nconst { Meta } = Card;\nconst { confirm } = Modal;\n\ninterface Props {\n  projectInfo: IProjectListItem;\n  onDeleteProject: (id: number) => IAction;\n  onUpdateProject: (param: IProjectUpdateParam) => IAction;\n}\n\nconst ProjectPane = ({ projectInfo, onDeleteProject, onUpdateProject }: Props) => {\n  console.log(projectInfo);\n  const [updateProjectVisible, setUpdateProjectVisible] = React.useState(false);\n  const handleDelete = () => {\n    let name = '';\n    confirm({\n      title: '警告',\n      content: (\n        <div>\n          <p>您确定要删除该项目吗?</p>\n          <p>\n            请输入项目名称<Input defaultValue={name} onChange={e => (name = e.target.value)}></Input>\n          </p>\n        </div>\n      ),\n      okText: '删除',\n      cancelText: '取消',\n      onOk() {\n        if (name === projectInfo.name) {\n          onDeleteProject(projectInfo.id);\n        } else {\n          message.error('项目名称不正确,请确认');\n          return Promise.reject();\n        }\n      },\n      onCancel() {\n        console.log('Cancel');\n      }\n    });\n  };\n  // const onUpdateProject = (param: IProjectUpdateParam) => {\n  //   return ;\n  // };\n  return (\n    <div className={style.wrapper}>\n      <ProjectUpdateModal\n        orginInfo={projectInfo}\n        visible={updateProjectVisible}\n        onClose={setUpdateProjectVisible}\n        onSubmit={onUpdateProject}\n      ></ProjectUpdateModal>\n      <Link to={`/project/analyse-event?projectId=${projectInfo.id}`}>\n        <Card\n          style={{ width: 300 }}\n          cover={<img alt='image' src={projectInfo.image || noimg} />}\n          actions={[\n            <Icon key='eye' type='eye' />,\n            <Icon key='share-alt' type='share-alt' />,\n            <Icon\n              key='edit'\n              type='edit'\n              onClick={e => {\n                e.preventDefault();\n                setUpdateProjectVisible(true);\n              }}\n            />,\n            <Icon\n              type='delete'\n              key='delete'\n              onClick={e => {\n                e.preventDefault();\n                handleDelete();\n              }}\n            />\n          ]}\n        >\n          <Meta\n            avatar={<AvatarText info={projectInfo.creator} />}\n            title={projectInfo.name}\n            description={projectInfo.description || '这人太懒了,没写描述'}\n          />\n        </Card>\n      </Link>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onDeleteProject: (id: number) => {\n        return doDeleteProject.request(id);\n      },\n      onUpdateProject: (param: IProjectUpdateParam) => {\n        return doUpdateProject.request(param);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(ProjectPane);\n","import { Modal, Form, Input } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IAddProject } from '@/api';\nimport { toastformError } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doAddProject } from '@/store/actions';\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  handleAddProject: (param: IAddProject) => IAction;\n}\n\nconst ProjectAddModel = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.handleAddProject(values);\n      props.onClose(false);\n    });\n  };\n  return (\n    <Modal onOk={handleSubmit} title='新建项目' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='项目名称'>\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: '请输入项目名称' }]\n          })(<Input placeholder='请输入项目名称' />)}\n        </Form.Item>\n        <Form.Item label='项目封面'>{getFieldDecorator('image', {})(<Input placeholder='请输入封面链接' />)}</Form.Item>\n        <Form.Item label='项目描述'>\n          {getFieldDecorator('description', {})(<Input placeholder='请输入项目描述' />)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      handleAddProject: params => {\n        return doAddProject.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Form.create<Props>()(ProjectAddModel));\n","import { Form, Input, Button } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IProjectListParam } from '@/api';\nimport { toastformError } from '@/utils';\ninterface Props extends FormComponentProps {\n  onSubmit: (param: IProjectListParam) => any;\n  defaultValue: IProjectListParam;\n}\n\nconst ProjectListForm = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.onSubmit({ ...values, page: 1, pageSize: 20 });\n    });\n  };\n  return (\n    <Form onSubmit={handleSubmit} layout='inline' {...formItemLayout}>\n      <Form.Item label='项目名称'>\n        {getFieldDecorator('projectName', {\n          initialValue: props.defaultValue.projectName\n        })(<Input placeholder='请输入项目名称' />)}\n      </Form.Item>\n      {/* <Form.Item>\n        <Button type='primary' htmlType='submit'>\n          查询\n        </Button>\n      </Form.Item> */}\n    </Form>\n  );\n};\n\nexport default Form.create<Props>()(ProjectListForm);\n","import * as React from 'react';\nimport style from './ProjectList.module.less';\nimport { connect } from 'react-redux';\nimport { IStoreState, IPageData } from '@/types';\n\nimport { Button, Pagination } from 'antd';\nimport AppHeader from '@/components/AppHeader';\nimport ProjectPane from './components/ProjectPane';\nimport { IProjectListItem, IProjectListParam } from '@/api';\nimport ProjectAddModel from './components/ProjectAddModel';\n\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doGetProjectList } from '@/store/actions';\nimport ProjectListForm from './components/ProjectListForm';\n\ninterface Props {\n  projectList: IPageData<IProjectListItem>;\n  projectListParams: IProjectListParam;\n  handleSubmit: (param: IProjectListParam) => IAction;\n}\n\nconst ProjectList = ({ projectList, handleSubmit, projectListParams }: Props) => {\n  const [addProjectVisible, setAddProjectVisible] = React.useState(false);\n\n  return (\n    <div className={style.wrapper}>\n      <ProjectAddModel visible={addProjectVisible} onClose={setAddProjectVisible}></ProjectAddModel>\n\n      <div className={style.header}>\n        <ProjectListForm defaultValue={projectListParams} onSubmit={handleSubmit}></ProjectListForm>\n        <Button type='primary' onClick={() => setAddProjectVisible(true)}>\n          新建项目\n        </Button>\n      </div>\n      <div className={style.listBox}>\n        {projectList.list.map(project => (\n          <ProjectPane key={project.id} projectInfo={project} />\n        ))}\n      </div>\n      <Pagination\n        onChange={(page, pageSize) => handleSubmit({ ...projectListParams, page, pageSize })}\n        pageSize={projectListParams.pageSize}\n        current={projectListParams.page}\n        total={projectList.totalCount}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { projectList, projectListParams } = state.project;\n  return {\n    projectList,\n    projectListParams\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      handleSubmit: (params: IProjectListParam) => {\n        return doGetProjectList.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList);\n"],"sourceRoot":""}