{"version":3,"sources":["pages/projectList/ProjectList.module.less","pages/projectList/components/ProjectAddModel.tsx","pages/projectList/components/ProjectListForm.tsx","pages/projectList/components/ProjectUpdateModal.tsx","pages/projectList/ProjectList.tsx","pages/team/TeamInfo.tsx"],"names":["module","exports","connect","dispatch","bindActionCreators","handleAddProject","params","doAddProject","request","Form","create","props","getFieldDecorator","form","React","resetFields","visible","onOk","e","preventDefault","validateFields","err","values","toastformError","onClose","title","onCancel","layout","formItemLayout","Item","label","rules","required","message","placeholder","onSubmit","page","pageSize","initialValue","defaultValue","projectName","id","orginInfo","name","description","confirm","Modal","state","project","projectList","projectListParams","onGetProjectList","doGetProjectList","onDeleteProject","doDeleteProject","onUpdateProject","param","doUpdateProject","team","addProjectVisible","setAddProjectVisible","updateProjectVisible","setUpdateProjectVisible","shouldUpdateProject","setshouldUpdateProject","shouldDelProject","setshouldDelProject","handleDelete","columns","key","dataIndex","render","text","record","to","ROUTE_PATH","analyseEvent","width","type","size","onClick","handleUpdate","info","content","onChange","target","value","okText","cancelText","error","Promise","reject","console","log","className","style","wrapper","ProjectUpdateModal","header","teamId","table","rowKey","dataSource","list","teamInfo"],"mappings":"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","file":"static/js/19.445a8afa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProjectList_wrapper__2sl33\",\"header\":\"ProjectList_header__r8sC_\",\"listBox\":\"ProjectList_listBox__2fHLw\",\"table\":\"ProjectList_table__3LrQJ\"};","import { Modal, Form, Input } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IAddProject } from '@/api';\nimport { toastformError } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doAddProject } from '@/store/actions';\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  handleAddProject: (param: IAddProject) => IAction;\n}\n\nconst ProjectAddModel = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.handleAddProject(values);\n      props.onClose(false);\n    });\n  };\n  return (\n    <Modal onOk={handleSubmit} title='新建项目' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='项目名称'>\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: '请输入项目名称' }]\n          })(<Input placeholder='请输入项目名称' />)}\n        </Form.Item>\n        <Form.Item label='项目描述'>\n          {getFieldDecorator('description', {})(<Input placeholder='请输入项目描述' />)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      handleAddProject: (params) => {\n        return doAddProject.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Form.create<Props>()(ProjectAddModel));\n","import { Form, Input, Button } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IProjectListParam } from '@/api';\nimport { toastformError } from '@/utils';\ninterface Props extends FormComponentProps {\n  onSubmit: (param: IProjectListParam) => any;\n  defaultValue: IProjectListParam;\n}\n\nconst ProjectListForm = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.onSubmit({ ...values, page: 1, pageSize: 20 });\n    });\n  };\n  return (\n    <Form onSubmit={handleSubmit} layout='inline' {...formItemLayout}>\n      <Form.Item label='项目名称'>\n        {getFieldDecorator('projectName', {\n          initialValue: props.defaultValue.projectName\n        })(<Input placeholder='请输入项目名称' />)}\n      </Form.Item>\n      {/* <Form.Item>\n        <Button type='primary' htmlType='submit'>\n          查询\n        </Button>\n      </Form.Item> */}\n    </Form>\n  );\n};\n\nexport default Form.create<Props>()(ProjectListForm);\n","import { Modal, Form, Input, message } from 'antd';\nimport * as React from 'react';\nimport { formItemLayout } from '@/constants';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { IProjectUpdateParam, IProjectListItem } from '@/api';\nimport { toastformError } from '@/utils';\nimport { connect } from 'react-redux';\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doUpdateProject } from '@/store/actions';\ninterface Props extends FormComponentProps {\n  visible: boolean;\n  onClose: (param: boolean) => any;\n  orginInfo: IProjectListItem;\n  onSubmit: (param: IProjectUpdateParam) => IAction;\n}\n\nconst ProjectUpdateModel = (props: Props) => {\n  const { getFieldDecorator } = props.form;\n  React.useEffect(() => {\n    props.form.resetFields();\n  }, [props.visible]);\n  const handleSubmit = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      props.onSubmit({ id: props.orginInfo.id, ...values });\n      props.onClose(false);\n    });\n  };\n  return (\n    <Modal onOk={handleSubmit} title='编辑项目' visible={props.visible} onCancel={() => props.onClose(false)}>\n      <Form layout='horizontal' {...formItemLayout}>\n        <Form.Item label='项目名称'>\n          {getFieldDecorator('name', {\n            initialValue: props.orginInfo.name,\n            rules: [{ required: true, message: '请输入项目名称' }]\n          })(<Input placeholder='请输入项目名称' />)}\n        </Form.Item>\n        <Form.Item label='项目描述'>\n          {getFieldDecorator('description', { initialValue: props.orginInfo.description })(\n            <Input placeholder='请输入项目描述' />\n          )}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default Form.create<Props>()(ProjectUpdateModel);\n","import * as React from 'react';\nimport style from './ProjectList.module.less';\nimport { connect } from 'react-redux';\nimport { IStoreState, IPageData } from '@/types';\n\nimport { Button, Pagination, Table, Modal, Input, message } from 'antd';\nimport AppHeader from '@/components/AppHeader';\nimport ProjectPane from './components/ProjectPane';\nimport { IProjectListItem, IProjectListParam, IProjectInfo, IProjectUpdateParam, ITeamInfo } from '@/api';\nimport ProjectAddModel from './components/ProjectAddModel';\n\nimport { IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doGetProjectList, doDeleteProject, doUpdateProject } from '@/store/actions';\nimport ProjectListForm from './components/ProjectListForm';\nimport { ColumnProps } from 'antd/lib/table';\nimport ProjectUpdateModal from './components/ProjectUpdateModal';\nimport { ROUTE_PATH } from '@/constants';\nimport { Link } from 'react-router-dom';\nimport { render } from 'react-dom';\nconst { confirm } = Modal;\n\ninterface Props {\n  projectList: IPageData<IProjectListItem>;\n  projectListParams: IProjectListParam;\n  onGetProjectList: (param: IProjectListParam) => IAction;\n  onDeleteProject: (id: number) => IAction;\n  onUpdateProject: (param: IProjectUpdateParam) => IAction;\n  team?: ITeamInfo;\n}\n\nconst ProjectList = ({\n  projectList,\n  onGetProjectList,\n  projectListParams,\n  onDeleteProject,\n  onUpdateProject,\n  team\n}: Props) => {\n  const [addProjectVisible, setAddProjectVisible] = React.useState(false);\n  const [updateProjectVisible, setUpdateProjectVisible] = React.useState(false);\n  const [shouldUpdateProject, setshouldUpdateProject] = React.useState<IProjectListItem>(null);\n  const [shouldDelProject, setshouldDelProject] = React.useState<IProjectListItem>(null);\n\n  React.useEffect(() => {\n    if (shouldDelProject) {\n      handleDelete(shouldDelProject);\n    }\n  }, [shouldDelProject]);\n\n  const columns: ColumnProps<IProjectListItem>[] = [\n    {\n      key: 'name',\n      title: '项目名称',\n      dataIndex: 'name',\n      render: (text, record) => <Link to={`${ROUTE_PATH.analyseEvent}?projectId=${record.id}`}>{text}</Link>\n    },\n    {\n      key: 'log',\n      title: '产生日志',\n      dataIndex: 'log'\n    },\n    {\n      key: 'description',\n      title: '备注',\n      dataIndex: 'description'\n    },\n    {\n      title: '操作',\n      key: 'action',\n      width: 180,\n      render: (text, record) => (\n        <span>\n          <Link to={`${ROUTE_PATH.analyseEvent}?projectId=${record.id}`}>\n            <Button type='link' size='small'>\n              查看\n            </Button>\n          </Link>\n          <Button type='link' size='small' onClick={() => handleUpdate(record)}>\n            编辑\n          </Button>\n          <Button type='link' size='small' onClick={() => setshouldDelProject(record)}>\n            删除\n          </Button>\n        </span>\n      )\n    }\n  ];\n\n  const handleUpdate = (info: IProjectListItem) => {\n    setshouldUpdateProject(info);\n    setUpdateProjectVisible(true);\n  };\n\n  const handleSearch = (param: IProjectListParam) => {\n    if (team) {\n      param.teamId = team.id;\n    }\n    onGetProjectList(param);\n  };\n\n  const handleDelete = (info: IProjectListItem) => {\n    let name = '';\n    confirm({\n      title: '警告',\n      content: (\n        <div>\n          <p>您确定要删除该项目吗?</p>\n          <p>\n            请输入项目名称<Input defaultValue={name} onChange={(e) => (name = e.target.value)}></Input>\n          </p>\n        </div>\n      ),\n      okText: '删除',\n      cancelText: '取消',\n      onOk() {\n        if (name === shouldDelProject.name) {\n          onDeleteProject(shouldDelProject.id);\n        } else {\n          message.error('项目名称不正确,请确认');\n          return Promise.reject();\n        }\n      },\n      onCancel() {\n        console.log('Cancel');\n      }\n    });\n  };\n\n  console.log('------');\n  console.log(projectList);\n\n  return (\n    <div className={style.wrapper}>\n      {shouldUpdateProject && (\n        <ProjectUpdateModal\n          orginInfo={shouldUpdateProject}\n          visible={updateProjectVisible}\n          onClose={setUpdateProjectVisible}\n          onSubmit={onUpdateProject}\n        ></ProjectUpdateModal>\n      )}\n      <ProjectAddModel visible={addProjectVisible} onClose={setAddProjectVisible}></ProjectAddModel>\n\n      <div className={style.header}>\n        <ProjectListForm defaultValue={projectListParams} onSubmit={handleSearch}></ProjectListForm>\n        <Button type='primary' onClick={() => setAddProjectVisible(true)}>\n          创建新项目\n        </Button>\n      </div>\n      {/* <div className={style.listBox}>\n        {projectList.list.map(project => (\n          <ProjectPane key={project.id} shouldUpdateProject={project} />\n        ))}\n      </div> */}\n      <div className={style.table}>\n        <Table rowKey='id' columns={columns} dataSource={projectList.list} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { projectList, projectListParams } = state.project;\n  return {\n    projectList,\n    projectListParams\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      onGetProjectList: (params: IProjectListParam) => {\n        return doGetProjectList.request(params);\n      },\n      onDeleteProject: (id: number) => {\n        return doDeleteProject.request(id);\n      },\n      onUpdateProject: (param: IProjectUpdateParam) => {\n        return doUpdateProject.request(param);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList);\n","import * as React from 'react';\nimport ProjectList from '../projectList/ProjectList';\nimport { connect } from 'react-redux';\nimport { IStoreState, IAction } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { ITeamInfo } from '@/api';\nimport AvatarText from '@/components/AvatarText';\n\ninterface Props {\n  teamInfo: ITeamInfo;\n}\n\nconst TeamInfo = ({ teamInfo }: Props) => {\n  return (\n    <div>\n      {/* <h3>\n        <AvatarText info={teamInfo.creator} />\n        {teamInfo.name}\n      </h3>\n      <div>\n        {teamInfo.members.map(member => (\n          <AvatarText key={member.id} size='mini' color='#999' info={member} />\n        ))}\n      </div> */}\n      <h2>\n        <strong>{teamInfo.name}</strong>团队项目\n      </h2>\n      <ProjectList team={teamInfo}></ProjectList>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) => bindActionCreators({}, dispatch);\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { teamInfo } = state.team;\n  return {\n    teamInfo\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInfo);\n"],"sourceRoot":""}