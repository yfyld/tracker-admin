{"version":3,"sources":["pages/custom/CustomQuery.tsx"],"names":["connect","state","projectId","project","projectInfo","id","handleChange","info","setparam","React","useState","dateStart","DYNAMIC_TIME","startDate","dateEnd","endDate","dateType","value","query","param","result","setResult","loading","className","style","wrapper","preview","span","onChange","val","target","pickerProps","allowClear","time","onClick","fetchCustomAnalyseData","then","res","data","spinning","columns","length","key","test","push","title","dataIndex","render","text","dayjs","Number","format","getTableColumns","bordered","dataSource"],"mappings":"i3BA4KeA,uBAPS,SAACC,GAEvB,MAAO,CACLC,UAFgBD,EAAME,QAAQC,YAAYC,MAMN,KAAzBL,EAxJK,SAAC,GAA0B,IAAxBE,EAAuB,EAAvBA,UACfI,EAAe,SAACC,GACpBC,EAASD,IAFiC,EAKlBE,IAAMC,SAAS,CACvCC,UAAWC,IAAa,GAAGC,YAC3BC,QAASF,IAAa,GAAGG,UACzBC,SAAUJ,IAAa,GAAGK,MAC1BC,MAAO,KATmC,mBAKrCC,EALqC,KAK9BX,EAL8B,OAYhBC,IAAMC,SAAS,IAZC,mBAYrCU,EAZqC,KAY7BC,EAZ6B,OAcdZ,IAAMC,UAAS,GAdD,mBAcrCY,EAdqC,UA0G5C,OACE,yBAAKC,UAAWC,IAAMC,SACpB,yBAAKF,UAAWC,IAAME,SACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CAAOV,MAAOE,EAAMD,MAAOU,SAAU,SAACC,GAAD,OAASvB,EAAa,EAAD,GAAMa,EAAN,CAAaD,MAAOW,EAAIC,OAAOb,aAE3F,kBAAC,IAAD,CAAKU,KAAM,IACT,kBAAC,IAAD,CACEI,YAAa,CAAEC,YAAY,GAC3BJ,SAAU,SAACK,GAAD,OAAU3B,EAAa,EAAD,GAAMa,EAAN,GAAgBc,KAChDhB,MAAO,CACLD,SAAUG,EAAMH,SAChBF,QAASK,EAAML,QACfH,UAAWQ,EAAMR,cAIvB,kBAAC,IAAD,CAAKgB,KAAM,GACT,kBAAC,IAAD,CAAQO,QA7GE,WAClBC,iCAAuB,EAAD,GAAMhB,EAAN,CAAajB,eAAakC,MAAK,SAACC,GACpDhB,EAAUgB,EAAIC,WA2GR,kBAGJ,6BACA,6BACA,yBAAKf,UAAU,uBACb,kBAAC,IAAD,CAAMgB,SAAUjB,GACd,kBAAC,IAAD,CAAOkB,QAnDO,SAACF,GACvB,IAAIE,EAAU,GACd,GAAIF,EAAKG,OAAS,EAChB,IAAK,IAAIC,KAAOJ,EAAK,GACf,MAAMK,KAAKD,KAGH,cAARA,EACFF,EAAQI,KAAK,CACXC,MAAOH,EACPA,IAAKA,EACLI,UAAWJ,EACXK,OAAQ,SAACC,GAAD,OAAkBC,IAAMC,OAAOF,IAAOG,OAAO,0BAGvDX,EAAQI,KAAK,CACXC,MAAOH,EACPA,IAAKA,EACLI,UAAWJ,KAKnB,OAAOF,EA4BiBY,CAAgBhC,GAASiC,UAAQ,EAACC,WAAYlC,IAE9D,6BACA,+BAIJ","file":"static/js/23.174c32dc.chunk.js","sourcesContent":["import { Icon, Collapse, Divider, Select, Input, Row, Col, Button, Spin, Table } from 'antd';\nimport React from 'react';\nimport AnalyseRangePicker from '@/components/AnalyseRangePicker';\n\nimport style from './CustomQuery.module.less';\nimport ReactEcharts, { ObjectMap } from 'echarts-for-react';\n\nimport { connect } from 'react-redux';\n\nimport { IAction, IStoreState, IListData, IDate } from '@/types';\nimport { fetchCustomAnalyseData } from '@/api';\nimport { DYNAMIC_TIME } from '@/constants';\nimport dayjs from 'dayjs';\nimport { getFormatByTimeUnit } from '@/utils';\nimport { ColumnProps } from 'antd/lib/table';\n\ninterface Props {\n  projectId: number;\n}\n\nconst CustomQuery = ({ projectId }: Props) => {\n  const handleChange = (info: any) => {\n    setparam(info);\n  };\n\n  const [param, setparam] = React.useState({\n    dateStart: DYNAMIC_TIME[1].startDate(),\n    dateEnd: DYNAMIC_TIME[1].endDate(),\n    dateType: DYNAMIC_TIME[1].value,\n    query: ''\n  });\n\n  const [result, setResult] = React.useState([]);\n\n  const [loading, setloading] = React.useState(false);\n\n  const handleQuery = () => {\n    fetchCustomAnalyseData({ ...param, projectId }).then((res) => {\n      setResult(res.data);\n    });\n  };\n\n  const getOptions = (data: any[]): ObjectMap => {\n    const options: ObjectMap = {\n      grid: {\n        bottom: 60,\n        top: 20\n      },\n      tooltip: {\n        trigger: 'axis'\n      },\n      legend: {\n        show: true,\n        bottom: 0\n      },\n      xAxis: {\n        type: 'time',\n        axisLine: {\n          lineStyle: {\n            color: '#999'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        minInterval: 1,\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: '#DDD'\n          }\n        },\n        axisLine: {\n          show: false,\n          lineStyle: {\n            color: '#333'\n          }\n        },\n        nameTextStyle: {\n          color: '#999'\n        },\n        splitArea: {\n          show: false\n        }\n      },\n      series: [\n        {\n          type: 'line',\n          data: data.map((val) => {\n            return {\n              name: data[0].metadataName,\n              value: [val.time, Number(val.count)]\n            };\n          })\n        }\n      ]\n    };\n\n    return options;\n  };\n\n  const getTableColumns = (data: any[]) => {\n    let columns = [] as ColumnProps<any>[];\n    if (data.length > 0) {\n      for (let key in data[0]) {\n        if (/^__/.test(key)) {\n          continue;\n        }\n        if (key === 'trackTime') {\n          columns.push({\n            title: key,\n            key: key,\n            dataIndex: key,\n            render: (text: number) => dayjs(Number(text)).format('YYYY-MM-DD HH:mm:ss')\n          });\n        } else {\n          columns.push({\n            title: key,\n            key: key,\n            dataIndex: key\n          });\n        }\n      }\n    }\n    return columns;\n  };\n  return (\n    <div className={style.wrapper}>\n      <div className={style.preview}>\n        <Row>\n          <Col span={12}>\n            <Input value={param.query} onChange={(val) => handleChange({ ...param, query: val.target.value })}></Input>\n          </Col>\n          <Col span={10}>\n            <AnalyseRangePicker\n              pickerProps={{ allowClear: false }}\n              onChange={(time) => handleChange({ ...param, ...time })}\n              value={{\n                dateType: param.dateType,\n                dateEnd: param.dateEnd,\n                dateStart: param.dateStart\n              }}\n            />\n          </Col>\n          <Col span={2}>\n            <Button onClick={handleQuery}>查询</Button>\n          </Col>\n        </Row>\n        <br />\n        <br />\n        <div className='app-tablePage-table'>\n          <Spin spinning={loading}>\n            <Table columns={getTableColumns(result)} bordered dataSource={result} />\n\n            <br />\n            <br />\n          </Spin>\n        </div>\n\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const projectId = state.project.projectInfo.id;\n  return {\n    projectId\n  };\n};\n\nexport default connect(mapStateToProps, null)(CustomQuery);\n"],"sourceRoot":""}