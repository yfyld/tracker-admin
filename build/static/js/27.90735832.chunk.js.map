{"version":3,"sources":["pages/project/components/ProjectInfo.tsx","pages/project/components/ProjectMember.tsx","pages/project/Project.tsx"],"names":["connect","state","project","projectInfo","projectList","dispatch","bindActionCreators","handleUpdateProject","params","doUpdateProject","request","Form","create","form","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","values","toastformError","id","style","maxWidth","formItemLayout","Item","label","initialValue","name","rules","required","message","btoa","associationProjects","map","item","mode","list","filter","Option","value","key","tailFormItemLayout","type","htmlType","columns","title","dataIndex","render","text","record","size","dataSource","members","TabPane","Tabs","props","defaultActiveKey","tab"],"mappings":"qcAiBA,IAuEeA,eAlBS,SAACC,GAAwB,IAAD,EACTA,EAAMC,QAC3C,MAAO,CACLC,YAH4C,EACtCA,YAGNC,YAJ4C,EACzBA,gBAOI,SAACC,GAAD,OACzBC,YACE,CACEC,oBAAqB,SAACC,GACpB,OAAOC,KAAgBC,QAAQF,KAGnCH,KAGWL,CAA6CW,IAAKC,QAALD,CAAqBA,IAAKC,QAALD,EAvE7D,SAAC,GAAoE,IAAlEE,EAAiE,EAAjEA,KAAMV,EAA2D,EAA3DA,YAAaI,EAA8C,EAA9CA,oBAAqBH,EAAyB,EAAzBA,YACrDU,EAAsBD,EAAtBC,kBAaR,OACE,gBAAC,IAAD,eAAMC,SAZa,SAACC,GACpBA,EAAEC,iBACFJ,EAAKK,gBAAe,SAACC,EAAKC,GACpBD,EACFE,YAAeF,GAGjBZ,E,yVAAoB,CAAD,CAAGe,GAAInB,EAAYmB,IAAOF,QAKjBG,MAAO,CAAEC,SAAU,MAAWC,MAC1D,gBAAC,IAAKC,KAAN,CAAWC,MAAM,4BACdb,EAAkB,OAAQ,CACzBc,aAAczB,EAAY0B,KAC1BC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sDALdlB,CAQE,gBAAC,IAAD,QAEL,gBAAC,IAAKY,KAAN,CAAWC,MAAM,YAAYM,KAAK,gBAAD,OAAiB9B,EAAYmB,GAA7B,OAEjC,gBAAC,IAAKI,KAAN,CAAWC,MAAM,4BACdb,EAAkB,wBAAyB,CAC1Cc,aAAczB,EAAY+B,oBAAoBC,KAAI,SAACC,GAAD,OAAUA,EAAKd,OADlER,CAGC,gBAAC,IAAD,CAAQuB,KAAK,YACVjC,EAAYkC,KACVC,QAAO,SAACH,GAAD,OAAUA,EAAKd,KAAOnB,EAAYmB,MACzCa,KAAI,SAACC,GAAD,OACH,gBAAC,IAAOI,OAAR,CAAeC,MAAOL,EAAKd,GAAIoB,IAAKN,EAAKd,IACtCc,EAAKP,YAMlB,gBAAC,IAAKH,KAASiB,KACb,gBAAC,IAAD,CAAQC,KAAK,UAAUC,SAAS,UAAhC,uB,wOCnDR,IAAMC,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,WACXN,IAAK,YAEP,CACEK,MAAO,eACPC,UAAW,WACXN,IAAK,YAEP,CACEK,MAAO,eACPC,UAAW,WACXN,IAAK,YAEP,CACEK,MAAO,eACPL,IAAK,SACLO,OAAQ,SAACC,EAAWC,GAClB,OACE,4BACE,gBAAC,IAAD,CAAQC,KAAK,SAAb,gBADF,OAGE,gBAAC,IAAD,CAAQA,KAAK,SAAb,oBAyBKpD,eATS,SAACC,GAEvB,MAAO,CACLE,YAFsBF,EAAMC,QAAtBC,gBAMiB,SAACE,GAAD,OAAiCC,YAAmB,GAAID,KAEpEL,EAlBO,SAAC,GAA4B,IAA1BG,EAAyB,EAAzBA,YACvB,OACE,2BACE,gBAAC,IAAD,iCACA,gBAAC,IAAD,CAAO2C,QAASA,EAASO,WAAYlD,EAAYmD,QAAQnB,KAAI,SAACC,GAAD,O,yVAAA,EAAaM,IAAKN,EAAKd,IAAOc,YCzC3FmB,EAAUC,IAAKD,QAsBN5C,cAAKC,QAALD,EAlBC,SAAC8C,GACf,OACE,2BACE,gBAAC,IAAD,CAAMC,iBAAiB,KACrB,gBAACH,EAAD,CAASI,IAAI,2BAAOjB,IAAI,KACtB,gBAAC,EAAD,OAEF,gBAACa,EAAD,CAASI,IAAI,eAAKjB,IAAI,KACpB,gBAAC,EAAD","file":"static/js/27.90735832.chunk.js","sourcesContent":["import { Form, Button, Input, Select } from 'antd';\nimport * as React from 'react';\nimport { FormComponentProps } from 'antd/lib/form/Form';\nimport { formItemLayout, tailFormItemLayout } from '@/constants';\nimport { connect } from 'react-redux';\nimport { IAction, IStoreState, IPageData } from '@/types';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { doUpdateProject } from '@/store/actions';\nimport { IProjectUpdateParam, IProjectInfo, IProjectListItem } from '@/api';\nimport { toastformError } from '@/utils';\n\ninterface Props extends FormComponentProps {\n  handleUpdateProject: (params: IProjectUpdateParam) => IAction;\n  projectInfo: IProjectInfo;\n  projectList: IPageData<IProjectListItem>;\n}\n\nconst ProjectInfo = ({ form, projectInfo, handleUpdateProject, projectList }: Props) => {\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (err) {\n        toastformError(err);\n        return;\n      }\n      handleUpdateProject({ id: projectInfo.id, ...values });\n    });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} style={{ maxWidth: 500 }} {...formItemLayout}>\n      <Form.Item label='项目名称'>\n        {getFieldDecorator('name', {\n          initialValue: projectInfo.name,\n          rules: [\n            {\n              required: true,\n              message: '项目名称不能为空'\n            }\n          ]\n        })(<Input />)}\n      </Form.Item>\n      <Form.Item label='trackKey'>{btoa(`{\"projectId\":${projectInfo.id}}`)}</Form.Item>\n\n      <Form.Item label='关联项目'>\n        {getFieldDecorator('associationProjectIds', {\n          initialValue: projectInfo.associationProjects.map((item) => item.id)\n        })(\n          <Select mode='multiple'>\n            {projectList.list\n              .filter((item) => item.id !== projectInfo.id)\n              .map((item) => (\n                <Select.Option value={item.id} key={item.id}>\n                  {item.name}\n                </Select.Option>\n              ))}\n          </Select>\n        )}\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type='primary' htmlType='submit'>\n          保存\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { projectInfo, projectList } = state.project;\n  return {\n    projectInfo,\n    projectList\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) =>\n  bindActionCreators(\n    {\n      handleUpdateProject: (params) => {\n        return doUpdateProject.request(params);\n      }\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create<Props>()(Form.create()(ProjectInfo)));\n","import { Table, Button } from 'antd';\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { IAction, IStoreState } from '@/types';\nimport { connect } from 'react-redux';\nimport { IProjectInfo } from '@/api';\n\ninterface Props {\n  projectInfo: IProjectInfo;\n}\n\nconst columns = [\n  {\n    title: '姓名',\n    dataIndex: 'nickname',\n    key: 'nickname'\n  },\n  {\n    title: '账号',\n    dataIndex: 'username',\n    key: 'username'\n  },\n  {\n    title: '角色',\n    dataIndex: 'roleName',\n    key: 'roleName'\n  },\n  {\n    title: '操作',\n    key: 'action',\n    render: (text: any, record: any) => {\n      return (\n        <span>\n          <Button size='small'>编辑</Button>\n          &nbsp;\n          <Button size='small'>移除</Button>\n        </span>\n      );\n    }\n  }\n];\n\nconst ProjectMember = ({ projectInfo }: Props) => {\n  return (\n    <div>\n      <Button>添加成员</Button>\n      <Table columns={columns} dataSource={projectInfo.members.map((item) => ({ key: item.id, ...item }))} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IStoreState) => {\n  const { projectInfo } = state.project;\n  return {\n    projectInfo\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction>) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectMember);\n","import { Tabs, Form } from 'antd';\nimport * as React from 'react';\nimport ProjectInfo from './components/ProjectInfo';\nimport ProjectMember from './components/ProjectMember';\n\nconst TabPane = Tabs.TabPane;\n\ninterface Props {}\n\nconst Project = (props: Props) => {\n  return (\n    <div>\n      <Tabs defaultActiveKey='1'>\n        <TabPane tab='基本信息' key='1'>\n          <ProjectInfo></ProjectInfo>\n        </TabPane>\n        <TabPane tab='成员' key='2'>\n          <ProjectMember></ProjectMember>\n        </TabPane>\n        {/* <TabPane tab=\"设置\" key=\"3\">\n          Content of Tab Pane 3\n        </TabPane> */}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Form.create()(Project);\n"],"sourceRoot":""}